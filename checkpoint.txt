import React, { useState } from 'react';
import { Pie } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  ArcElement,
  Tooltip,
  Legend,
} from 'chart.js';

ChartJS.register(ArcElement, Tooltip, Legend);

const App = () => {
  const [motherType, setMotherType] = useState('');
  const [fatherType, setFatherType] = useState('');
  const [result, setResult] = useState(null);

  const calculateBloodType = () => {
    const bloodTypeTable = {
      // A + A
      "A+_A+": { A: 100, B: 0, AB: 0, O: 0 },
      "A+_A-": { A: 75, B: 0, AB: 25, O: 0 },
      "A-_A+": { A: 75, B: 0, AB: 25, O: 0 },
      "A-_A-": { A: 100, B: 0, AB: 0, O: 0 },
  
      // A + B
      "A+_B+": { A: 25, B: 25, AB: 25, O: 25 },
      "B+_A+": { A: 25, B: 25, AB: 25, O: 25 },
      "A+_B-": { A: 25, B: 25, AB: 25, O: 25 },
      "B-_A+": { A: 25, B: 25, AB: 25, O: 25 },
      "A-_B+": { A: 25, B: 25, AB: 25, O: 25 },
      "B+_A-": { A: 25, B: 25, AB: 25, O: 25 },
      "A-_B-": { A: 25, B: 25, AB: 25, O: 25 },
      "B-_A-": { A: 25, B: 25, AB: 25, O: 25 },
  
      // A + AB
      "A+_AB+": { A: 50, B: 25, AB: 25, O: 0 },
      "A+_AB-": { A: 50, B: 25, AB: 25, O: 0 },
      "A-_AB+": { A: 50, B: 25, AB: 25, O: 0 },
      "A-_AB-": { A: 50, B: 25, AB: 25, O: 0 },
      "AB+_A+": { A: 50, B: 25, AB: 25, O: 0 },
      "AB-_A+": { A: 50, B: 25, AB: 25, O: 0 },
      "AB+_A-": { A: 50, B: 25, AB: 25, O: 0 },
      "AB-_A-": { A: 50, B: 25, AB: 25, O: 0 },
      
  
      // A + O
      "A+_O+": { A: 50, B: 0, AB: 0, O: 50 },
      "A+_O-": { A: 50, B: 0, AB: 0, O: 50 },
      "A-_O+": { A: 50, B: 0, AB: 0, O: 50 },
      "A-_O-": { A: 50, B: 0, AB: 0, O: 50 },
      "O+_A+": { A: 50, B: 0, AB: 0, O: 50 },
      "O-_A+": { A: 50, B: 0, AB: 0, O: 50 },
      "O+_A-": { A: 50, B: 0, AB: 0, O: 50 },
      "O-_A-": { A: 50, B: 0, AB: 0, O: 50 },
  
      // B + B
      "B+_B+": { A: 0, B: 75, AB: 25, O: 0 },
      "B+_B-": { A: 0, B: 75, AB: 25, O: 0 },
      "B-_B+": { A: 0, B: 75, AB: 25, O: 0 },
      "B-_B-": { A: 0, B: 100, AB: 0, O: 0 },
  
      // B + AB
      "B+_AB+": { A: 25, B: 50, AB: 25, O: 0 },
      "B+_AB-": { A: 25, B: 50, AB: 25, O: 0 },
      "B-_AB+": { A: 25, B: 50, AB: 25, O: 0 },
      "B-_AB-": { A: 25, B: 50, AB: 25, O: 0 },
      "AB+_B+": { A: 25, B: 50, AB: 25, O: 0 },
      "AB-_B+": { A: 25, B: 50, AB: 25, O: 0 },
      "AB+_B-": { A: 25, B: 50, AB: 25, O: 0 },
      "AB-_B-": { A: 25, B: 50, AB: 25, O: 0 },
  
      // B + O
      "B+_O+": { A: 0, B: 50, AB: 0, O: 50 },
      "B+_O-": { A: 0, B: 50, AB: 0, O: 50 },
      "B-_O+": { A: 0, B: 50, AB: 0, O: 50 },
      "B-_O-": { A: 0, B: 50, AB: 0, O: 50 },
      "O+_B+": { A: 0, B: 50, AB: 0, O: 50 },
      "O-_B+": { A: 0, B: 50, AB: 0, O: 50 },
      "O+_B-": { A: 0, B: 50, AB: 0, O: 50 },
      "O-_B-": { A: 0, B: 50, AB: 0, O: 50 },
  
      // AB + AB
      "AB+_AB+": { A: 25, B: 25, AB: 50, O: 0 },
      "AB+_AB-": { A: 25, B: 25, AB: 50, O: 0 },
      "AB-_AB+": { A: 25, B: 25, AB: 50, O: 0 },
      "AB-_AB-": { A: 25, B: 25, AB: 50, O: 0 },
  
      // AB + O
      "AB+_O+": { A: 25, B: 25, AB: 0, O: 50 },
      "AB+_O-": { A: 25, B: 25, AB: 0, O: 50 },
      "AB-_O+": { A: 25, B: 25, AB: 0, O: 50 },
      "AB-_O-": { A: 25, B: 25, AB: 0, O: 50 },
      "O+_AB+": { A: 25, B: 25, AB: 0, O: 50 },
      "O-_AB+": { A: 25, B: 25, AB: 0, O: 50 },
      "O+_AB-": { A: 25, B: 25, AB: 0, O: 50 },
      "O-_AB-": { A: 25, B: 25, AB: 0, O: 50 },
  
      // O + O
      "O+_O+": { A: 0, B: 0, AB: 0, O: 100 },
      "O+_O-": { A: 0, B: 0, AB: 0, O: 100 },
      "O-_O+": { A: 0, B: 0, AB: 0, O: 100 },
      "O-_O-": { A: 0, B: 0, AB: 0, O: 100 },
    };
  
    // Combine mother and father blood types
    const key = `${motherType}_${fatherType}`;
  
    // Retrieve probabilities from table
    const probabilities = bloodTypeTable[key] || {
      A: 0,
      B: 0,
      AB: 0,
      O: 0,
    };
  
    setResult(probabilities);
  };
  

  return (
    <div
      style={{
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        height: '100vh',
        padding: '10px',
        boxSizing: 'border-box',
      }}
    >
      <h1>Blood Type Calculator</h1>
      <div
        style={{
          display: 'flex',
          flexDirection: 'row',
          justifyContent: 'space-around',
          alignItems: 'center',
          width: '100%',
          maxWidth: '800px',
          gap: '20px',
        }}
      >
        <div>
          <h3>Mother's Blood Type</h3>
          <select
            value={motherType}
            onChange={(e) => setMotherType(e.target.value)}
          >
            <option value="">Select</option>
            <option value="A+">A+</option>
            <option value="B+">B+</option>
            <option value="AB+">AB+</option>
            <option value="O+">O+</option>
            <option value="A-">A-</option>
            <option value="B-">B-</option>
            <option value="AB-">AB-</option>
            <option value="O-">O-</option>
          </select>
        </div>

        <div>
          <h3>Father's Blood Type</h3>
          <select
            value={fatherType}
            onChange={(e) => setFatherType(e.target.value)}
          >
            <option value="">Select</option>
            <option value="A+">A+</option>
            <option value="B+">B+</option>
            <option value="AB+">AB+</option>
            <option value="O+">O+</option>
            <option value="A-">A-</option>
            <option value="B-">B-</option>
            <option value="AB-">AB-</option>
            <option value="O-">O-</option>
          </select>
        </div>
      </div>

      <button
        onClick={calculateBloodType}
        style={{
          margin: '20px 0',
          padding: '10px 20px',
          cursor: 'pointer',
          backgroundColor: '#007bff',
          color: '#fff',
          border: 'none',
          borderRadius: '5px',
        }}
      >
        Calculate
      </button>

      {result && (
        <div
          style={{
            display: 'flex',
            flexDirection: 'row',
            justifyContent: 'space-between',
            alignItems: 'center',
            width: '100%',
            maxWidth: '800px',
          }}
        >
          <div style={{ flex: 1, textAlign: 'left' }}>
            <h2>Results</h2>
            <ul>
              {Object.entries(result).map(([type, percentage]) => (
                <li key={type}>
                  {type}: {percentage}%
                </li>
              ))}
            </ul>
          </div>

          <div style={{ flex: 1 }}>
            <Pie
              data={{
                labels: ['A', 'B', 'AB', 'O'],
                datasets: [
                  {
                    data: Object.values(result),
                    backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],
                  },
                ],
              }}
              options={{
                responsive: true,
                maintainAspectRatio: false,
              }}
              style={{ height: '200px', width: '200px' }}
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default App;
